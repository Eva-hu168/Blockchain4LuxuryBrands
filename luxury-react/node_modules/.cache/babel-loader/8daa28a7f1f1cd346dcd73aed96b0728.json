{"ast":null,"code":"var _jsxFileName = \"/Users/wanqiwang/Documents/GitHub/Blockchain4LuxuryBrands/luxury-react/src/App.js\";\n// https://www.jianshu.com/p/5da35f504aef\n// https://web3js.readthedocs.io/en/v1.2.0/web3-eth-contract.html\nimport React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport luxury from './luxury';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = async event => {\n      //console.log(\"the new post is -> \" + this.state.value);\n      const accounts = await web3.eth.getAccounts(); //this.setState({status: \"Updating...\"});\n\n      await luxury.methods.setStoreInfo(this.state.to).send({\n        from: accounts[0]\n      });\n      console.log(\"completed \"); // update the posts\n      //let posts = this.state.posts;\n      //posts.push(this.state.value);\n      //this.setState({posts: posts}); \n    };\n\n    this.state = {\n      manager: \"NOT SET\",\n      myitems: [],\n      to: \"\"\n    };\n    this.getMyAddress = this.getMyAddress.bind(this);\n    this.getMyItems = this.getMyItems.bind(this);\n  } // will be executed after page gets loaded\n\n\n  async componentDidMount() {\n    // solidity calls are async call, add await in front of call to make sync\n    const manager = await luxury.methods.manager().call();\n    const accounts = await web3.eth.getAccounts(); //update this.state.manager so render will be executed\n\n    this.setState({\n      manager: manager,\n      accounts: accounts\n    });\n  }\n\n  async getMyAddress() {\n    var ads = await luxury.methods.getMyAddress().call({\n      from: this.state.accounts[0]\n    }); // set message for the return values to be show in the page..\n    // this is the best way i can do it now, but i think there will be other solutions\n\n    this.setState({\n      message1: \"Your address is \" + ads\n    });\n  }\n\n  async getMyItems() {\n    var myitems = await luxury.methods.getMyItems().call({\n      from: this.state.accounts[0]\n    });\n    this.setState({\n      myitems: myitems\n    });\n  }\n\n  // This function will be called when any variable in this state...??\n  // And the return of this function will be rendered in to HTML and ??\n  render() {\n    // you can see this line in the browser console\n    console.log(\"manager is \" + this.state.manager);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, \"Luxury Contract\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, \"This contract is managed by \", this.state.manager), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getMyAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, \"Get my address\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, this.state.message1), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getMyItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, \"Get my items\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, this.state.myitems.map((value, index) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 28\n        }\n      }, \" \", value);\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.to,\n      onChange: event => this.setState({\n        to: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"Transfer Ownership\"));\n  }\n\n}\n\nexport default App; // 1. show variable, basicly call view\n// 2. set variable, basicly call transact\n// 3.","map":{"version":3,"sources":["/Users/wanqiwang/Documents/GitHub/Blockchain4LuxuryBrands/luxury-react/src/App.js"],"names":["React","Component","web3","luxury","App","constructor","props","onSubmit","event","accounts","eth","getAccounts","methods","setStoreInfo","state","to","send","from","console","log","manager","myitems","getMyAddress","bind","getMyItems","componentDidMount","call","setState","ads","message1","render","map","value","index","target"],"mappings":"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","sourcesContent":["// https://www.jianshu.com/p/5da35f504aef\n// https://web3js.readthedocs.io/en/v1.2.0/web3-eth-contract.html\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport luxury from './luxury';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            manager: \"NOT SET\",\n            myitems:[],\n            to: \"\"\n        };\n        this.getMyAddress = this.getMyAddress.bind(this);\n        this.getMyItems = this.getMyItems.bind(this);\n    }\n\n\n    // will be executed after page gets loaded\n    async componentDidMount(){\n      // solidity calls are async call, add await in front of call to make sync\n      const manager = await luxury.methods.manager().call();\n      const accounts = await web3.eth.getAccounts();\n\n      //update this.state.manager so render will be executed\n      this.setState({manager: manager,accounts: accounts});\n    }\n\n    async getMyAddress(){\n      var ads = await luxury.methods.getMyAddress().call({from: this.state.accounts[0]});\n      // set message for the return values to be show in the page..\n      // this is the best way i can do it now, but i think there will be other solutions\n      this.setState({ message1: \"Your address is \" + ads});\n    }\n\n    async getMyItems(){\n      var myitems = await luxury.methods.getMyItems().call({from: this.state.accounts[0]});\n      this.setState({myitems:myitems})\n    }\n\n    onSubmit = async event => {\n      //console.log(\"the new post is -> \" + this.state.value);\n      const accounts = await web3.eth.getAccounts();\n      //this.setState({status: \"Updating...\"});\n      await luxury.methods.setStoreInfo(this.state.to).send({from: accounts[0]});\n  \n      console.log(\"completed \");\n  \n      // update the posts\n      //let posts = this.state.posts;\n      //posts.push(this.state.value);\n      //this.setState({posts: posts}); \n      \n    };\n    // This function will be called when any variable in this state...??\n    // And the return of this function will be rendered in to HTML and ??\n\n    render(){\n        // you can see this line in the browser console\n        console.log(\"manager is \" + this.state.manager);\n\n        return (\n            <div className=\"App\">\n                <h1>Luxury Contract</h1>\n                <p>This contract is managed by {this.state.manager}</p>\n                \n                <button onClick={this.getMyAddress}>Get my address</button>\n                <p>{this.state.message1}</p>\n                \n                <button onClick={this.getMyItems}>Get my items</button>\n                <ul>\n                  {this.state.myitems.map((value, index) => {\n                    return <li key={index}> {value}</li>\n                  })}\n                </ul>\n                \n                <form onSubmit={this.onSubmit}>\n                  <div>\n                    <input\n                      value = {this.state.to}\n                      onChange={event => this.setState({to:event.target.value})}\n                    />\n                  </div>\n                  <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                \n                <h2>Transfer Ownership</h2>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n// 1. show variable, basicly call view\n// 2. set variable, basicly call transact\n// 3."]},"metadata":{},"sourceType":"module"}